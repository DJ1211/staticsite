from split_delimiter import text_to_textnodes
from textnode import text_node_to_html_node
from htmlnode import ParentNode


block_type_paragraph = "paragraph"
block_type_heading = "heading"
block_type_code = "code"
block_type_quote = "quote"
block_type_unordered_list = "unordered_list"
block_type_ordered_list = "ordered_list"


def markdown_to_blocks(markdown):
    split_markdown = markdown.split("\n\n")
    split_markdown = list(filter(None, split_markdown)) #Removes empty string (generated by even number of abundant new lines)
    blocks = list(map(str.strip, split_markdown)) #Removes trailing white space and strings that contain only \n (generated by odd number of abundant new lines)
    return blocks

def block_to_block_type(block):

    #Heading
    if block.startswith(("# ", "## ", "### ", "#### ", "##### ", "###### ")):
        heading_text = block.split(" ", 1)
        if len(heading_text) > 1 and heading_text[1].strip():
            return block_type_heading
        else:
            return block_type_paragraph
   
    # Code
    elif block[:3] == "```":
        if block[-3:] == "```":
            return block_type_code
        else:
            return block_type_paragraph
        
    # Quote
    elif block[0] == ">":
        is_quote = True
        lines = str.splitlines(block)
        for line in lines:
            if line[0] != ">":
                is_quote = False
        if is_quote == True:
            return block_type_quote
        else:
            return block_type_paragraph
    
    # Unordered Lists
    elif block[:2] == "* " or block[:2] == "- ":
        is_unordered_list = True
        lines = str.splitlines(block)
        for line in lines:
            if line[:2] != "* " and line[:2] != "- ":
                is_unordered_list = False
        if is_unordered_list == True:
            return block_type_unordered_list
        else:
            return block_type_paragraph
        
    # Ordered Lists
    elif block[:3] == "1. ":
        is_ordered_list = True
        count = 1
        lines = str.splitlines(block)
        for line in lines:
            if int(line[0]) == count and line[1] == "." and line[2] == " ":
                count += 1
            else:
                is_ordered_list = False
        if is_ordered_list == True:
            return block_type_ordered_list
        else:
            return block_type_paragraph

    else:
        return block_type_paragraph

def markdown_to_html_node(markdown):
    final_nodes = []
    markdown_blocks = markdown_to_blocks(markdown)
    for block in markdown_blocks:
        block_type = block_to_block_type(block)
        html_node = create_html_node(block_type, block)
        final_nodes.append(html_node)
    full_node = ParentNode("div", final_nodes)
    return full_node

   
def create_html_node(block_type, block):
    if block_type == block_type_paragraph:
        lines = block.split("\n")
        paragraph = " ".join(lines)
        child_node = text_to_children(paragraph)
        node = ParentNode("p", child_node)
        return node
    
    elif block_type == block_type_heading:
        new_text, tag = format_heading(block)
        child_node = text_to_children(new_text)
        node = ParentNode(f"{tag}", child_node)
        return node
    
    elif block_type == block_type_code:
        code_node = create_code_node(block)
        node = ParentNode("pre", [code_node])
        return node
    
    elif block_type == block_type_quote:
        new_text, tag = format_quote(block)
        child_node = text_to_children(new_text)
        node = ParentNode(f"{tag}", child_node)
        return node
    
    elif block_type == block_type_unordered_list:
        new_text, tag = format_unordered_list(block)
        all_child_nodes = format_list_child_nodes(new_text)
        node = ParentNode(f"{tag}", all_child_nodes)
        return node
    
    elif block_type == block_type_ordered_list:
        new_text, tag = format_ordered_list(block)
        all_child_nodes = format_list_child_nodes(new_text)
        node = ParentNode(f"{tag}", all_child_nodes)
        return node


def text_to_children(text):
    child_nodes = []
    text_node = text_to_textnodes(text)
    for node in text_node:
        child_nodes.append(text_node_to_html_node(node))
    return child_nodes


def format_heading(heading):
        if heading.startswith("# "):
            new_text = heading[2:]
            tag = "h1"
        elif heading.startswith("## "):
            new_text = heading[3:]
            tag = "h2"
        elif heading.startswith("### "):
            new_text = heading[4:]
            tag = "h3"
        elif heading.startswith("#### "):
            new_text = heading[5:]
            tag = "h4"
        elif heading.startswith("##### "):
            new_text = heading[6:]
            tag = "h5"
        elif heading.startswith("###### "):
            new_text = heading[7:]
            tag = "h6"
        
        return new_text, tag


def create_code_node(block):
    child_text = block.replace("```", "")
    child_node = text_to_children(child_text)
    code_node = ParentNode("code", child_node)
    return code_node


def format_quote(quote):
    stripped_lines = []
    lines = quote.split("\n")
    for line in lines:
        if line.startswith("> "):
            new_text = line[2:]
        elif line.startswith(">"):
            new_text = line[1:]
        stripped_lines.append(new_text)
    new_text = " ".join(stripped_lines)
    tag = "blockquote"
    return new_text, tag


def format_unordered_list(block):
    stripped_lines = []
    lines = block.split("\n")
    for line in lines:
        stripped_lines.append(line[2:])
    new_text = "\n".join(stripped_lines)
    tag = "ul"
    return new_text, tag


def format_ordered_list(block):
    stripped_lines = []
    lines = block.split("\n")
    for line in lines:
        stripped_lines.append(line[3:])
    new_text = "\n".join(stripped_lines)
    tag = "ol"
    return new_text, tag


def format_list_child_nodes(text):
    all_child_nodes = []
    lines = text.split("\n")
    for line in lines:
        child_node = text_to_children(line)
        child_nodes = ParentNode("li", child_node)
        all_child_nodes.append(child_nodes)
    return all_child_nodes

markdown = """This is a paragraph\nAnd this is a **bold** paragraph\nAnd this is an *italic* paragraph"""
html_node = markdown_to_html_node(markdown)
print(html_node.to_html())